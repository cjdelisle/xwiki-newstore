diff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/macro/DefaultWikiMacroInitializer.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/macro/DefaultWikiMacroInitializer.java
index bc761c1..e1d05e2 100644
--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/macro/DefaultWikiMacroInitializer.java
+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/macro/DefaultWikiMacroInitializer.java
@@ -19,6 +19,7 @@
  */
 package com.xpn.xwiki.internal.macro;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
@@ -41,6 +42,8 @@
 import org.xwiki.rendering.macro.wikibridge.WikiMacroInitializer;
 import org.xwiki.rendering.macro.wikibridge.WikiMacroManager;
 import org.xwiki.rendering.syntax.Syntax;
+import org.xwiki.query.Query;
+import org.xwiki.query.QueryManager;
 
 import com.xpn.xwiki.XWikiContext;
 import com.xpn.xwiki.XWikiException;
@@ -189,24 +192,15 @@ private void registerMacrosForWiki(String wikiName, XWikiContext xcontext)
      * Search for all wiki macros in the current wiki.
      * 
      * @param xcontext the current request context
-     * @return a list of documents containing wiki macros, each item as a vector of 3 strings: space name, document
-     *         name, last author of the document
+     * @return a list of documents containing wiki macros,
+     *         each item as a List of 3 strings: space name, document name, last author of the document
      * @throws Exception if the database search fails
      */
     private List<Object[]> getWikiMacroDocumentData(XWikiContext xcontext) throws Exception
     {
-        // TODO: Use the query manager instead
-        String sql = "select doc.space, doc.name, doc.author from XWikiDocument doc, BaseObject obj where "
-            + "doc.fullName=obj.name and obj.className=?";
-        List<Object[]> wikiMacroDocumentData;
-        try {
-            wikiMacroDocumentData = xcontext.getWiki().getStore().search(sql, 0, 0, Arrays.asList(WIKI_MACRO_CLASS),
-                xcontext);
-        } catch (XWikiException ex) {
-            throw new Exception("Error while searching for macro documents", ex);
-        }
-
-        return wikiMacroDocumentData;
+        final QueryManager qm = xcontext.getWiki().getStore().getQueryManager();
+        final Query q = qm.getNamedQuery("getWikiMacroDocuments").bindValue("classname", WIKI_MACRO_CLASS);
+        return (List<Object[]>) (List) q.execute();
     }
 
     /**
diff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/plugin/packaging/Package.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/plugin/packaging/Package.java
index fc3f144..bc6ade3 100644
--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/plugin/packaging/Package.java
+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/plugin/packaging/Package.java
@@ -51,6 +51,7 @@
 import org.dom4j.io.OutputFormat;
 import org.dom4j.io.SAXReader;
 import org.xwiki.model.reference.SpaceReference;
+import org.xwiki.model.reference.EntityReference;
 import org.xwiki.observation.ObservationManager;
 import org.xwiki.query.QueryException;
 
@@ -92,8 +93,6 @@
 
     private List<DocumentInfo> customMappingFiles = null;
 
-    private List<DocumentInfo> classFiles = null;
-
     private boolean backupPack = false;
 
     private boolean preserveVersion = false;
@@ -227,7 +226,6 @@ public Package()
     {
         this.files = new ArrayList<DocumentInfo>();
         this.customMappingFiles = new ArrayList<DocumentInfo>();
-        this.classFiles = new ArrayList<DocumentInfo>();
     }
 
     public boolean add(XWikiDocument doc, int defaultAction, XWikiContext context) throws XWikiException
@@ -259,9 +257,6 @@ public boolean add(XWikiDocument doc, int defaultAction, XWikiContext context) t
             docinfo.setAction(defaultAction);
             this.files.add(docinfo);
             BaseClass bclass = doc.getXClass();
-            if (bclass.getFieldList().size() > 0) {
-                this.classFiles.add(docinfo);
-            }
             if (bclass.getCustomMapping() != null) {
                 this.customMappingFiles.add(docinfo);
             }
@@ -583,18 +578,30 @@ public int install(XWikiContext context) throws XWikiException
 
         // Start by installing all documents having a class definition so that their
         // definitions are available when installing documents using them.
-        for (DocumentInfo classFile : this.classFiles) {
-            if (installDocument(classFile, isAdmin, backup, context) == DocumentInfo.INSTALL_ERROR) {
-                status = DocumentInfo.INSTALL_ERROR;
+        int i = 0;
+        while (i < this.files.size()) {
+            final DocumentInfo docInfoI = this.files.get(i);
+            final XWikiDocument docI = docInfoI.getDoc();
+            jloop:
+            for (int j = i + 1; j < this.files.size(); j++) {
+                final XWikiDocument docJ = this.files.get(j).getDoc();
+                final EntityReference docJRef = docJ.getDocumentReference();
+                for (final EntityReference objClass : docI.getXObjects().keySet()) {
+                    if (objClass.equals(docJRef)) {
+                        this.files.remove(i);
+                        this.files.add(docInfoI);
+                        i--;
+                        break jloop;
+                    }
+                }
             }
+            i++;
         }
 
-        // Install the remaining documents (without class definitions).
+        // Install the documents.
         for (DocumentInfo docInfo : this.files) {
-            if (!this.classFiles.contains(docInfo)) {
-                if (installDocument(docInfo, isAdmin, backup, context) == DocumentInfo.INSTALL_ERROR) {
-                    status = DocumentInfo.INSTALL_ERROR;
-                }
+            if (installDocument(docInfo, isAdmin, backup, context) == DocumentInfo.INSTALL_ERROR) {
+                status = DocumentInfo.INSTALL_ERROR;
             }
         }
         setStatus(status, context);
diff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/queries.hbm.xml b/xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/queries.hbm.xml
index b84ebeb..577eeb6 100644
--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/queries.hbm.xml
+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/queries.hbm.xml
@@ -36,4 +36,9 @@
     select distinct doc.fullName from XWikiDocument as doc, BaseObject as obj
     where obj.name=doc.fullName and obj.className='XWiki.XWikiUsers'
   </query>
+  <query name="getWikiMacroDocuments">
+    select doc.space, doc.name, doc.author from XWikiDocument doc, BaseObject obj
+    where doc.fullName=obj.name
+      and obj.className=:classname
+  </query>
 </hibernate-mapping>
diff --git a/xwiki-platform-core/xwiki-platform-store/pom.xml b/xwiki-platform-core/xwiki-platform-store/pom.xml
index f1a01a8..3f09f18 100644
--- a/xwiki-platform-core/xwiki-platform-store/pom.xml
+++ b/xwiki-platform-core/xwiki-platform-store/pom.xml
@@ -41,6 +41,7 @@
     <module>xwiki-platform-store-locks</module>
     <module>xwiki-platform-store-serialization</module>
     <module>xwiki-platform-store-filesystem</module>
+    <module>xwiki-platform-store-legacy</module>
     <module>xwiki-platform-store-filesystem-attachments</module>
   </modules>
   <build>
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-api/src/main/java/org/xwiki/store/Pointer.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-api/src/main/java/org/xwiki/store/Pointer.java
new file mode 100644
index 0000000..c95edc9
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-api/src/main/java/org/xwiki/store/Pointer.java
@@ -0,0 +1,34 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store;
+
+
+/**
+ * A Java version of a C/C++ pointer which can be passed to a function and set inside of that function.
+ *
+ * @param <T> The type of object which this pointer points to.
+ * @version $Id$
+ * @since 3.2M1
+ */
+public class Pointer<T>
+{
+    /** The thing which this pointer points to. */
+    public T target;
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/pom.xml b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/pom.xml
index 030801d..4c1c4d1 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/pom.xml
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/pom.xml
@@ -93,6 +93,13 @@
       <version>${project.version}</version>
     </dependency>
 
+    <!-- XWikiTransactionProvider -->
+    <dependency>
+      <groupId>org.xwiki.platform</groupId>
+      <artifactId>xwiki-platform-store-legacy</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
 
    <!-- Testing Dependencies -->
 
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/main/java/com/xpn/xwiki/store/FilesystemAttachmentStore.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/main/java/com/xpn/xwiki/store/FilesystemAttachmentStore.java
index 02f519d..2ecd4ab 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/main/java/com/xpn/xwiki/store/FilesystemAttachmentStore.java
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/main/java/com/xpn/xwiki/store/FilesystemAttachmentStore.java
@@ -31,14 +31,17 @@
 import com.xpn.xwiki.doc.XWikiAttachmentContent;
 import com.xpn.xwiki.doc.XWikiAttachmentArchive;
 import com.xpn.xwiki.doc.XWikiDocument;
-import org.hibernate.Session;
+import javax.inject.Inject;
+import javax.inject.Named;
 import org.xwiki.component.annotation.Component;
-import org.xwiki.component.annotation.Requirement;
 import org.xwiki.store.filesystem.internal.FilesystemStoreTools;
 import org.xwiki.store.FileSaveTransactionRunnable;
 import org.xwiki.store.FileDeleteTransactionRunnable;
 import org.xwiki.store.StreamProvider;
 import org.xwiki.store.TransactionRunnable;
+import org.xwiki.store.XWikiTransactionProvider;
+import org.xwiki.store.XWikiTransaction;
+import org.xwiki.store.StartableTransactionRunnable;
 
 
 /**
@@ -53,17 +56,27 @@
     /**
      * Tools for getting files to store given content in.
      */
-    @Requirement
+    @Inject
     private FilesystemStoreTools fileTools;
 
     /**
+     * A means of getting a transaction to run the attachment save operation in.
+     */
+    @Named("configured")
+    @Inject
+    private XWikiTransactionProvider provider;
+
+    /**
      * Testing Constructor.
      *
      * @param fileTools tools for getting files to store given content in and locks.
+     * @param provider the means to get a transaction to run the store operation in.
      */
-    public FilesystemAttachmentStore(final FilesystemStoreTools fileTools)
+    public FilesystemAttachmentStore(final FilesystemStoreTools fileTools,
+                                     final XWikiTransactionProvider provider)
     {
         this.fileTools = fileTools;
+        this.provider = provider;
     }
 
     /** Constructor for component manager. */
@@ -101,7 +114,7 @@ public void saveAttachmentContent(final XWikiAttachment attachment,
                                       final boolean bTransaction)
         throws XWikiException
     {
-        final XWikiHibernateTransaction transaction = new XWikiHibernateTransaction(context);
+        final StartableTransactionRunnable transaction = this.provider.get();
         this.getAttachmentContentSaveRunnable(attachment, updateDocument, context).runIn(transaction);
         try {
             transaction.start();
@@ -109,9 +122,7 @@ public void saveAttachmentContent(final XWikiAttachment attachment,
             if (e instanceof XWikiException) {
                 throw (XWikiException) e;
             }
-            throw new XWikiException(XWikiException.MODULE_XWIKI_STORE,
-                                     XWikiException.ERROR_XWIKI_STORE_HIBERNATE_SAVING_ATTACHMENT,
-                                     "Exception while saving attachment.", e);
+            throw new RuntimeException("Exception while saving attachment.", e);
         }
     }
 
@@ -122,10 +133,10 @@ public void saveAttachmentContent(final XWikiAttachment attachment,
      * @param attachment the XWikiAttachment whose content should be saved.
      * @param updateDocument whether or not to update the document at the same time.
      * @param context the XWikiContext for the request.
-     * @return a TransactionRunnable for saving the attachment content in an XWikiHibernateTransaction.
+     * @return a TransactionRunnable for saving the attachment content in an XWikiTransaction.
      * @throws XWikiException if thrown by AttachmentSaveTransactionRunnable()
      */
-    private TransactionRunnable<XWikiHibernateTransaction> getAttachmentContentSaveRunnable(
+    private TransactionRunnable<XWikiTransaction> getAttachmentContentSaveRunnable(
         final XWikiAttachment attachment,
         final boolean updateDocument,
         final XWikiContext context)
@@ -135,7 +146,7 @@ public void saveAttachmentContent(final XWikiAttachment attachment,
 
         if (content == null) {
             // If content does not exist we should not blank the attachment.
-            return new TransactionRunnable<XWikiHibernateTransaction>();
+            return new TransactionRunnable<XWikiTransaction>();
         }
 
         // This is the permanent location where the attachment content will go.
@@ -170,7 +181,7 @@ public void saveAttachmentsContent(final List<XWikiAttachment> attachments,
         }
 
         try {
-            final XWikiHibernateTransaction transaction = new XWikiHibernateTransaction(context);
+            final StartableTransactionRunnable transaction = this.provider.get();
 
             for (XWikiAttachment attach : attachments) {
                 this.getAttachmentContentSaveRunnable(attach, false, context).runIn(transaction);
@@ -178,7 +189,7 @@ public void saveAttachmentsContent(final List<XWikiAttachment> attachments,
 
             // Save the parent document only once.
             if (updateDocument) {
-                new TransactionRunnable<XWikiHibernateTransaction>() {
+                new TransactionRunnable<XWikiTransaction>() {
                     protected void onRun() throws Exception
                     {
                         context.getWiki().getStore().saveXWikiDoc(doc, context, false);
@@ -254,7 +265,7 @@ public void deleteXWikiAttachment(final XWikiAttachment attachment,
                                       final boolean bTransaction)
         throws XWikiException
     {
-        final XWikiHibernateTransaction transaction = new XWikiHibernateTransaction(context);
+        final StartableTransactionRunnable<? extends XWikiTransaction> transaction = this.provider.get();
         this.getAttachmentDeleteRunnable(attachment, parentUpdate, context).runIn(transaction);
         try {
             transaction.start();
@@ -275,10 +286,10 @@ public void deleteXWikiAttachment(final XWikiAttachment attachment,
      * @param updateDocument whether or not to update the document at the same time.
      * @param context the XWikiContext for the request.
      * @return a TransactionRunnable for deleting the attachment which must be run inside of an
-     *                               XWikiHibernateTransaction
+     *                               XWikiTransaction
      * @throws XWikiException if unable to load the attachment archive to delete.
      */
-    private TransactionRunnable<XWikiHibernateTransaction> getAttachmentDeleteRunnable(
+    private TransactionRunnable<XWikiTransaction> getAttachmentDeleteRunnable(
         final XWikiAttachment attachment,
         final boolean updateDocument,
         final XWikiContext context)
@@ -312,18 +323,8 @@ public void cleanUp(XWikiContext context)
     /**
      * A TransactionRunnable for saving an attachment.
      */
-    private static class AttachmentSaveTransactionRunnable
-        extends TransactionRunnable<XWikiHibernateTransaction>
+    private static class AttachmentSaveTransactionRunnable extends TransactionRunnable<XWikiTransaction>
     {
-        /** The XWikiAttachment whose content should be saved. */
-        private final XWikiAttachment attachment;
-
-        /** Whether or not to update the document at the same time. */
-        private final boolean updateDocument;
-
-        /** The XWikiContext for the request. */
-        private final XWikiContext context;
-
         /**
          * Construct a TransactionRunnable for saving the attachment content.
          *
@@ -363,7 +364,7 @@ public AttachmentSaveTransactionRunnable(final XWikiAttachment attachment,
                     favs.getArchiveSaveRunnable(archive, context).runIn(this);
                 }
             } else {
-                new TransactionRunnable<XWikiHibernateTransaction>() {
+                new TransactionRunnable<XWikiTransaction>() {
                     protected void onRun() throws XWikiException
                     {
                         avs.saveArchive(archive, context, false);
@@ -375,35 +376,21 @@ protected void onRun() throws XWikiException
             if (updateDocument) {
                 final XWikiStoreInterface store = context.getWiki().getStore();
                 final XWikiDocument doc = attachment.getDoc();
-                new TransactionRunnable<XWikiHibernateTransaction>() {
+                new TransactionRunnable<XWikiTransaction>() {
                     protected void onRun() throws XWikiException
                     {
                         store.saveXWikiDoc(doc, context, false);
                     }
                 } .runIn(this);
             }
-
-            this.attachment = attachment;
-            this.updateDocument = updateDocument;
-            this.context = context;
         }
     }
 
     /**
      * A TransactionRunnable for deleting an attachment.
      */
-    private static class AttachmentDeleteTransactionRunnable
-        extends TransactionRunnable<XWikiHibernateTransaction>
+    private static class AttachmentDeleteTransactionRunnable extends TransactionRunnable<XWikiTransaction>
     {
-        /** The XWikiAttachment whose content should be saved. */
-        private final XWikiAttachment attachment;
-
-        /** Whether or not to update the document at the same time. */
-        private final boolean updateDocument;
-
-        /** The XWikiContext for the request. */
-        private final XWikiContext context;
-
         /**
          * Construct a TransactionRunnable for deleting the attachment.
          *
@@ -432,7 +419,7 @@ public AttachmentDeleteTransactionRunnable(final XWikiAttachment attachment,
                 final FilesystemAttachmentVersioningStore favs = (FilesystemAttachmentVersioningStore) avs;
                 favs.getArchiveDeleteRunnable(attachment.loadArchive(context)).runIn(this);
             } else {
-                new TransactionRunnable<HibernateTransaction>() {
+                new TransactionRunnable<XWikiTransaction>() {
                     protected void onRun() throws XWikiException
                     {
                         avs.deleteArchive(attachment, context, false);
@@ -440,44 +427,25 @@ protected void onRun() throws XWikiException
                 } .runIn(this);
             }
 
-            this.context = context;
-            this.attachment = attachment;
-            this.updateDocument = updateDocument;
-        }
-
-        /**
-         * {@inheritDoc}
-         *
-         * @see TransactionRunnable#onRun()
-         */
-        protected void onRun() throws Exception
-        {
-            // TODO: When the rest of storage is rewritten using TransactionRunnable,
-            //       this method should be disolved.
-
-            final Session session = this.context.getWiki().getHibernateStore().getSession(this.context);
-
-            // Delete the content from the attachment.
-            // In case it was stored in the database by XWikiHibernateAttachmentStore.
-            session.delete(new XWikiAttachmentContent(this.attachment));
-
             // Update the document if required.
-            if (this.updateDocument) {
-                final String filename = this.attachment.getFilename();
+            if (updateDocument) {
+                final String filename = attachment.getFilename();
                 final List<XWikiAttachment> list = attachment.getDoc().getAttachmentList();
-                for (int i = 0; i < list.size(); i++) {
-                    if (filename.equals(list.get(i).getFilename())) {
-                        list.remove(i);
-                        break;
+                new TransactionRunnable<XWikiTransaction>() {
+                    protected void onRun() throws XWikiException
+                    {
+                        for (int i = 0; i < list.size(); i++) {
+                            if (filename.equals(list.get(i).getFilename())) {
+                                list.remove(i);
+                                break;
+                            }
+                        }
+                        context.getWiki().getStore().saveXWikiDoc(attachment.getDoc(),
+                                                                  context,
+                                                                  false);
                     }
-                }
-                this.context.getWiki().getStore().saveXWikiDoc(this.attachment.getDoc(),
-                                                               this.context,
-                                                               false);
+                } .runIn(this);
             }
-
-            // Delete the attachment metadata.
-            session.delete(this.attachment);
         }
     }
 }
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/test/java/com/xpn/xwiki/store/FilesystemAttachmentStoreTest.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/test/java/com/xpn/xwiki/store/FilesystemAttachmentStoreTest.java
index 1400a3b..b93abdb 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/test/java/com/xpn/xwiki/store/FilesystemAttachmentStoreTest.java
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-attachments/src/test/java/com/xpn/xwiki/store/FilesystemAttachmentStoreTest.java
@@ -62,6 +62,10 @@
 
 import org.xwiki.test.AbstractMockingComponentTestCase;
 import org.xwiki.store.locks.preemptive.internal.PreemptiveLockProvider;
+import org.xwiki.store.internal.XWikiHibernateTransaction;
+import org.xwiki.store.XWikiTransaction;
+import org.xwiki.store.StartableTransactionRunnable;
+import org.xwiki.store.XWikiTransactionProvider;
 
 import org.apache.commons.io.IOUtils;
 
@@ -166,7 +170,9 @@ public void setUp() throws Exception
                                             storageLocation,
                                             new PreemptiveLockProvider());
 
-        this.attachStore = new FilesystemAttachmentStore(fileTools);
+        this.attachStore =
+            new FilesystemAttachmentStore(fileTools,
+                                          new DummyHibernateTransactionProvider(this.mockContext));
         this.storeFile =
             this.fileTools.getAttachmentFileProvider(this.mockAttach).getAttachmentContentFile();
         HELLO_STREAM.reset();
@@ -236,7 +242,6 @@ public void deleteAttachmentTest() throws Exception
     {
         this.jmockContext.checking(new Expectations() {{
             oneOf(mockAttachVersionStore).deleteArchive(mockAttach, mockContext, false);
-            exactly(2).of(mockHibernateSession).delete(with(anything()));
         }});
         this.createFile();
 
@@ -254,7 +259,6 @@ public void documentUpdateOnDeleteTest() throws Exception
 
         this.jmockContext.checking(new Expectations() {{
             oneOf(mockAttachVersionStore).deleteArchive(mockAttach, mockContext, false);
-            exactly(2).of(mockHibernateSession).delete(with(anything()));
             oneOf(mockHibernate).saveXWikiDoc(doc, mockContext, false);
                 will(new CustomAction("Make sure the attachment has been removed from the list.") {
                     public Object invoke(final Invocation invoc)
@@ -305,4 +309,19 @@ private static void resursiveDelete(final File toDelete) throws IOException
         }
         toDelete.delete();
     }
+
+    private static class DummyHibernateTransactionProvider implements XWikiTransactionProvider
+    {
+        private XWikiContext context;
+
+        public DummyHibernateTransactionProvider(final XWikiContext context)
+        {
+            this.context = context;
+        }
+
+        public StartableTransactionRunnable<XWikiTransaction> get()
+        {
+            return new XWikiHibernateTransaction(this.context);
+        }
+    }
 }
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileDeleteTransactionRunnable.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileDeleteTransactionRunnable.java
index a587c4d..4d493ef 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileDeleteTransactionRunnable.java
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileDeleteTransactionRunnable.java
@@ -32,7 +32,7 @@
  * @version $Id$
  * @since 3.0M2
  */
-public class FileDeleteTransactionRunnable extends StartableTransactionRunnable<TransactionRunnable>
+public class FileDeleteTransactionRunnable extends StartableTransactionRunnable
 {
     /** The location of the file to sdelete. */
     private final File toDelete;
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileSaveTransactionRunnable.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileSaveTransactionRunnable.java
index ea62d3d..4c42822 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileSaveTransactionRunnable.java
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem/src/main/java/org/xwiki/store/FileSaveTransactionRunnable.java
@@ -37,7 +37,7 @@
  * @version $Id$
  * @since 3.0M2
  */
-public class FileSaveTransactionRunnable extends StartableTransactionRunnable<TransactionRunnable>
+public class FileSaveTransactionRunnable extends StartableTransactionRunnable
 {
     /** The location of the file to save the attachment content in. */
     private final File toSave;
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/pom.xml b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/pom.xml
new file mode 100644
index 0000000..219ff29
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/pom.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ *
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ *
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.xwiki.platform</groupId>
+    <artifactId>xwiki-platform-store</artifactId>
+    <version>3.2-SNAPSHOT</version>
+  </parent>
+  <artifactId>xwiki-platform-store-legacy</artifactId>
+  <name>XWiki Platform - Store - Legacy</name>
+  <description>A connector which bridges the storage engine in oldcore into the new storage module.</description>
+  <dependencies>
+
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-component-api</artifactId>
+      <version>${commons.version}</version>
+    </dependency>
+
+    <!-- TransactionRunnable -->
+    <dependency>
+      <groupId>org.xwiki.platform</groupId>
+      <artifactId>xwiki-platform-store-transaction</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>org.xwiki.platform</groupId>
+      <artifactId>xwiki-platform-oldcore</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransaction.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransaction.java
new file mode 100644
index 0000000..f431c77
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransaction.java
@@ -0,0 +1,31 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store;
+
+/**
+ * A Transaction in which XWiki storage operations will be able to be performed.
+ *
+ * @version $Id$
+ * @since 3.2M1
+ */
+public interface XWikiTransaction
+{
+    // Do nothing.
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransactionProvider.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransactionProvider.java
new file mode 100644
index 0000000..d27736d
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/XWikiTransactionProvider.java
@@ -0,0 +1,35 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store;
+
+import org.xwiki.component.annotation.ComponentRole;
+
+/**
+ * A means of getting a transaction in which XWiki storage operations will be able to be performed.
+ *
+ * @version $Id$
+ * @since 3.2M1
+ */
+@ComponentRole
+public interface XWikiTransactionProvider
+{
+    /** @return a fresh transaction of the type for the configured storage engine. */
+    StartableTransactionRunnable<? extends XWikiTransaction> get();
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/ConfiguredXWikiTransactionProvider.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/ConfiguredXWikiTransactionProvider.java
new file mode 100644
index 0000000..db75fd1
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/ConfiguredXWikiTransactionProvider.java
@@ -0,0 +1,88 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store.internal;
+
+import com.xpn.xwiki.XWikiContext;
+import javax.inject.Inject;
+import org.xwiki.context.Execution;
+import org.xwiki.component.annotation.Component;
+import org.xwiki.component.manager.ComponentLookupException;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.phase.Initializable;
+import org.xwiki.component.phase.InitializationException;
+import org.xwiki.store.XWikiTransaction;
+import org.xwiki.store.XWikiTransactionProvider;
+import org.xwiki.store.StartableTransactionRunnable;
+
+
+/**
+ * XWikiTransactionProvider which provides the transaction type given by the xwiki.cfg config file.
+ * 
+ * @version $Id$
+ * @since 3.2M1
+ */
+@Component("configured")
+public class ConfiguredXWikiTransactionProvider implements XWikiTransactionProvider, Initializable
+{
+    /** A means to get the xwiki.cfg configured hint. */
+    @Inject
+    private Execution exec;
+
+    /** ComponentManager to get TransactionProvider from. */
+    @Inject
+    private ComponentManager manager;
+
+    /** The provider which will be wrapped, chosen by examining configuration. */
+    private XWikiTransactionProvider provider;
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see org.xwiki.component.phase.Initializable#initialize()
+     */
+    public void initialize() throws InitializationException
+    {
+        final XWikiContext context = (XWikiContext) this.exec.getContext().getProperty("xwikicontext");
+        final String hint = context.getWiki().Param("xwiki.store.main.hint");
+        if ("configured".equals(hint)) {
+            throw new InitializationException("The provider specified in xwiki.cfg "
+                                              + "xwiki.store.main.hint, is the same hint as the provider "
+                                              + "which defers to the hint. This would cause an "
+                                              + "infinite loop.");
+        }
+        try {
+            this.provider = manager.lookup(XWikiTransactionProvider.class, hint);
+        } catch (ComponentLookupException e) {
+            throw new InitializationException("Could not find provider specified in xwiki.cfg "
+                                              + "xwiki.store.main.hint, check that there is actually a "
+                                              + "transaction provider by that name.");
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see org.xwiki.store.XWikiTransactionProvider#get()
+     */
+    public StartableTransactionRunnable<? extends XWikiTransaction> get()
+    {
+        return this.provider.get();
+    }
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransaction.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransaction.java
new file mode 100644
index 0000000..488e8e4
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransaction.java
@@ -0,0 +1,108 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store.internal;
+
+import com.xpn.xwiki.XWikiContext;
+import com.xpn.xwiki.XWikiException;
+
+import com.xpn.xwiki.store.XWikiHibernateBaseStore;
+import org.xwiki.store.RootTransactionRunnable;
+import org.xwiki.store.XWikiTransaction;
+
+/**
+ * A Transaction based on XWikiHibernateStore.
+ * SQL based TransactionRunnables MUST extend RootTransactionRunnable because
+ * SQL storage engines are incapable of rolling back after commit.
+ *
+ * @version $Id$
+ * @since 3.0M2
+ */
+public class XWikiHibernateTransaction extends RootTransactionRunnable<XWikiTransaction>
+{
+    /** The storage engine. */
+    private final XWikiHibernateBaseStore store;
+
+    /** The XWikiContext associated with the request which started this Transaction. */
+    private final XWikiContext context;
+
+    /**
+     * True if the transaction should be ended when finished.
+     * This will only be false if the transaction could not be started because another transaction
+     * was already open and associated with the same XWikiContext.
+     */
+    private boolean shouldCloseTransaction;
+
+    /**
+     * The Constructor.
+     *
+     * @param context the XWikiContext associated with the request which started this Transaction.
+     */
+    public XWikiHibernateTransaction(final XWikiContext context)
+    {
+        this.store = context.getWiki().getHibernateStore();
+        this.context = context;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see RootTransactionRunnable#begin()
+     */
+    public void onPreRun() throws XWikiException
+    {
+        this.store.checkHibernate(this.context);
+    }
+
+    /**
+     * {@inheritDoc}
+     * onRun() is guaranteed to be run in the root runnable first.
+     * onPreRun should run before the transaction is opened.
+     *
+     * @see RootTransactionRunnable#begin()
+     */
+    public void onRun() throws XWikiException
+    {
+        this.shouldCloseTransaction = this.store.beginTransaction(this.context);
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see RootTransactionRunnable#onCommit()
+     */
+    public void onCommit()
+    {
+        if (this.shouldCloseTransaction) {
+            this.store.endTransaction(this.context, true);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see RootTransactionRunnable#onRollback()
+     */
+    public void onRollback()
+    {
+        if (this.shouldCloseTransaction) {
+            this.store.endTransaction(this.context, false);
+        }
+    }
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransactionProvider.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransactionProvider.java
new file mode 100644
index 0000000..afe1cd7
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/java/org/xwiki/store/internal/XWikiHibernateTransactionProvider.java
@@ -0,0 +1,54 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.store.internal;
+
+import com.xpn.xwiki.XWikiContext;
+import javax.inject.Inject;
+import org.xwiki.component.annotation.Component;
+import org.xwiki.context.Execution;
+import org.xwiki.store.XWikiTransactionProvider;
+import org.xwiki.store.XWikiTransaction;
+import org.xwiki.store.StartableTransactionRunnable;
+
+/**
+ * A provider for acquiring transaction based on XWikiHibernateStore.
+ * This is the default provider because XWikiHibernateStore is the default storage component.
+ *
+ * @version $Id$
+ * @since 3.2M1
+ */
+@Component
+public class XWikiHibernateTransactionProvider implements XWikiTransactionProvider
+{
+    /** The means of getting the XWikiContext. */
+    @Inject
+    private Execution exec;
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see XWikiTransactionProvider#get()
+     */
+    public StartableTransactionRunnable<XWikiTransaction> get()
+    {
+        final XWikiContext context = (XWikiContext) this.exec.getContext().getProperty("xwiki-context");
+        return new XWikiHibernateTransaction(context);
+    }
+}
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/resources/META-INF/components.txt b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/resources/META-INF/components.txt
new file mode 100644
index 0000000..3fc6717
--- /dev/null
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-legacy/src/main/resources/META-INF/components.txt
@@ -0,0 +1,2 @@
+org.xwiki.store.internal.XWikiHibernateTransactionProvider
+org.xwiki.store.internal.ConfiguredXWikiTransactionProvider
diff --git a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-transaction/src/main/java/org/xwiki/store/TransactionException.java b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-transaction/src/main/java/org/xwiki/store/TransactionException.java
index 9d8b362..169349f 100644
--- a/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-transaction/src/main/java/org/xwiki/store/TransactionException.java
+++ b/xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-transaction/src/main/java/org/xwiki/store/TransactionException.java
@@ -111,6 +111,18 @@ public TransactionException(final String message,
         return new ArrayList<Throwable>(this.causes);
     }
 
+    /**
+     * {@inheritDoc}
+     * Just get the first cause and hope there are no others.
+     *
+     * @see java.lang.Exception#getCause()
+     */
+    @Override
+    public Throwable getCause()
+    {
+        return this.causes.get(0);
+    }
+
     /** @return the total number of exceptions which caused this exception to be thrown. */
     public int exceptionCount()
     {
